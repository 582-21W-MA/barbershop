#!/bin/bash

###############################################################################
# HELP

function print_help() {
    echo "Barbershop is a simple static site generator using Mustache          "
    echo "templates. It transforms templates found in the source directory     "
    echo "into HTML files and places them in a site directory. It looks for    "
    echo "a data.json file in the same directory as the page template file.    "
    echo "Data from src/global.json file is available to all pages. It ignores "
    echo "directories beginning with an underscore, and copies src/assets      "
    echo "directory in the site directory.                                     "
    echo
    echo "Syntax:"
    echo "    barbershop [src] [site] [mustache] [-h]"
    echo
    echo "Arguments:"
    echo "    src         Source directory containing template files."
    echo "                If ommited, look for directory named src."
    echo "    site        Directory where to put HTML files."
    echo "                If ommited, use directory named site."
    echo "    mustache    Path to mustache executable."
    echo "                If omitted, use mustache command from PATH."
    echo
    echo "Options:"
    echo "    -h    Print help."
}

while getopts ":h" option; do
    case $option in
        h)
            print_help
            exit
            ;;
    esac
done

###############################################################################
# PROCESSOR

# Set default values. See Bash parameter expansion:
# https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
src_dir=${1:-src}
site_dir=${2:-site}
mustache=${3:-mustache}

page_processed=0

# `-e` checks if the given file or directory exists.
if [ ! -e "$src_dir" ]; then
    echo "No source directory found."
    exit
fi

# `find` searches in folders that don't begin with an underscore
# for files with a mustache extension, and returns their path.
for page_path in $(find "$src_dir"/[!_]* -name "*.mustache"); do

    page_dir=$(dirname "$page_path")
    data_path="$page_dir/data.json"
    global_data_path="$src_dir/global.json"

    # Bash's builtin parameter expansion is used for substitution
    # as it's more portable than using an external command such
    # as sed.
    site_path="${page_path/$src_dir/$site_dir}"
    site_path="${site_path/.mustache/.html}"

    mkdir -p "$(dirname $site_path)"

    if [ -e "$global_data_path" ] && [ -e "$data_path" ]; then
        $mustache --override "$global_data_path" "$data_path" "$page_path" \
            > "$site_path"
    elif [ -e "$global_data_path" ]; then
        $mustache "$global_data_path" "$page_path" > "$site_path"
    elif [ -e "$data_path" ]; then
        $mustache "$data_path" "$page_path" > "$site_path"
    else
        # If there is no JSON file alongside the page template,
        # process the template with an empty string as data.
        echo "" | $mustache "$page_path" > "$site_path"
    fi

    ((page_processed++))

done

if [-e "$src_dir/assets"]; then
    cp -r "$src_dir/assets" "$site_dir"
done

echo "All mustaches successfully shaved. $page_processed pages created."